'use client'

import { checkCurrentPassword, updateUserInfo } from '@/app/actions'
import { Container, Title } from '@/shared/components'
import { FormInput } from '@/shared/components/form'
import {
	formAccountUpdateSchema,
	formNewPasswordUpdateSchema,
	TFormAccountUpdateValues,
	TFormNewPasswordUpdateValues
} from '@/shared/components/modals/auth-modal/forms/schemas'
import { Button } from '@/shared/components/ui/button'
import { zodResolver } from '@hookform/resolvers/zod'
import type { User } from '@prisma/client'
import React from 'react'
import { FormProvider, useForm } from 'react-hook-form'
import toast from 'react-hot-toast'

interface Props {
	data: User
}

export const SettingsProfilePageAuthGroup: React.FC<Props> = ({ data }) => {
	const formAccountUpdate = useForm<TFormAccountUpdateValues>({
		resolver: zodResolver(formAccountUpdateSchema),
		defaultValues: {
			email: data.email,
			currentPassword: ''
		}
	})
	
	const formPasswordUpdate = useForm<TFormNewPasswordUpdateValues>({
		resolver: zodResolver(formNewPasswordUpdateSchema),
		defaultValues: {
			password: '',
			confirmPassword: ''
		}
	})
	
	const onSubmit = async () => {
		const emailData = formAccountUpdate.getValues('email')
		const currentPasswordData = formAccountUpdate.getValues('currentPassword') || '' // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
		const passwordData = formPasswordUpdate.getValues('password')
		const confirmPasswordData = formPasswordUpdate.getValues('confirmPassword')
		
		// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
		let isAccountValid = true
		let isPasswordValid = true
		
		if (emailData) {
			isAccountValid = await formAccountUpdate.trigger(['email', 'currentPassword'])
		}
		
		if (passwordData || confirmPasswordData) {
			isPasswordValid = await formPasswordUpdate.trigger(['password', 'confirmPassword'])
			isAccountValid = isAccountValid && await formAccountUpdate.trigger('currentPassword')
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
			if (passwordData !== confirmPasswordData) {
				toast.error('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', {
					icon: '‚ùå'
				})
				return
			}
		}
		
		if (!isAccountValid || !isPasswordValid) {
			toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', {
				icon: '‚ùå'
			})
			return
		}
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
		const isCurrentPasswordValid = await checkCurrentPassword(data.id, currentPasswordData)
		if (!isCurrentPasswordValid) {
			toast.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å', {
				icon: '‚ùå'
			})
			return
		}
		
		// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		const accountData = formAccountUpdate.getValues()
		
		try {
			await updateUserInfo({
				where: { id: data.id },
				data: {
					email: accountData.email,
					password: passwordData || undefined
				}
			})
			
			toast.success('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã üìù', {
				icon: '‚úÖ'
			})
			
			formPasswordUpdate.reset({
				password: '',
				confirmPassword: ''
			})
			formAccountUpdate.reset({
				currentPassword: ''
			})
		} catch (error) {
			toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö', {
				icon: '‚ùå'
			})
		}
	}
	
	return (
		<Container className='bg-secondary rounded-md mt-1 p-4'>
			<Title text='–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å' size='sm' />
			
			<FormProvider {...formAccountUpdate}>
				<form className='mt-2'>
					<div className='flex items-center gap-4'>
						<FormInput
							className='w-full'
							type='email'
							name='email'
							label='E-Mail'
							required
						/>
						<FormInput
							className='w-full'
							type='password'
							name='currentPassword'
							label='–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å'
							placeholder='********'
							required
						/>
					</div>
				</form>
			</FormProvider>
			
			<FormProvider {...formPasswordUpdate}>
				<form className='mt-2'>
					<div className='flex items-center gap-4'>
						<FormInput
							className='w-full'
							type='password'
							name='password'
							label='–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'
							placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'
						/>
						<FormInput
							className='w-full'
							type='password'
							name='confirmPassword'
							label='–ü–æ–¥—Ç–≤–µ—Ä–¥—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å'
							placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑'
						/>
					</div>
				</form>
			</FormProvider>
			
			<Button
				disabled={formAccountUpdate.formState.isSubmitting || formPasswordUpdate.formState.isSubmitting}
				variant='blue'
				className='text-base mt-6 w-full'
				onClick={onSubmit}
			>
				–°–æ—Ö—Ä–∞–Ω–∏—Ç—å
			</Button>
		</Container>
	)
}
