'use client'

import { Community, Media, Post } from '@/payload-types'
import { Button } from '@/shared/components/ui/button'
import {
	Dialog,
	DialogContent,
	DialogHeader,
	DialogTitle
} from '@/shared/components/ui/dialog'
import { useCurrentTime } from '@/shared/hooks/useCurrentTime'
import { OutputData } from '@editorjs/editorjs'
import { zodResolver } from '@hookform/resolvers/zod'
import dynamic from 'next/dynamic'
import React, {
	useCallback,
	useState,
	useEffect,
	useRef,
	FormEvent
} from 'react'
import { FormProvider, useForm } from 'react-hook-form'
import { FormInput } from '../../form'
import { MetaSidebar } from '../../post-edit/items/meta-sidebar'
import { SidebarProvider, SidebarTrigger } from '../../ui/sidebar'
import { formTitleSchema, TFormTitleValues } from './schemas'

interface Props {
	authorId: number
	authorAvatar: string
	authorName: string
	communities: Community[]
	post?: Post
	authorUrl: string
	open: boolean
	onClose: () => void
}

const Editor = dynamic(() => import('../../editorjs/Editor'), { ssr: false })

export const PostEditModal: React.FC<Props> = ({
	                                               authorId,
	                                               authorAvatar,
	                                               authorName,
	                                               communities,
	                                               post,
	                                               open,
	                                               onClose
                                               }) => {
	const form = useForm<TFormTitleValues>({
		resolver: zodResolver(formTitleSchema),
		defaultValues: { title: post?.title || '' }
	})
	
	const currentTime = useCurrentTime()
	
	const initialContent: OutputData = post?.content
		? (post.content as unknown as OutputData)
		: { blocks: [] }
	
	const [content, setContent] = useState<OutputData>(initialContent)
	const [selectedCommunityId, setSelectedCommunityId] = useState<number | null>(
		post?.community && typeof post.community === 'object' ? post.community.id : null
	)
	const [heroImage, setHeroImage] = useState<Media | undefined>(
		post?.heroImage && typeof post.heroImage === 'object' ? post.heroImage : undefined
	)
	const [seotitle, setSeoTitle] = useState(post?.meta?.title || '')
	const [seodescription, setSeoDescription] = useState(post?.meta?.description || '')
	const [seoImage, setSeoImage] = useState<Media | undefined>(
		post?.meta?.image && typeof post.meta.image === 'object' ? post.meta.image : undefined
	)
	const [draftId, setDraftId] = useState<number | null>(post?.id || null)
	const [lastSavedState, setLastSavedState] = useState<any>(null)
	const [autoSaveCountdown, setAutoSaveCountdown] = useState(60)
	const [draftCountdown, setDraftCountdown] = useState(5)
	const [saveStatus, setSaveStatus] = useState('')
	const [isDraftCreated, setIsDraftCreated] = useState(!!post)
	const [pendingDraftState, setPendingDraftState] = useState<{
		title: string
		content: OutputData
	} | null>(null)
	
	const draftTimerRef = useRef<NodeJS.Timeout | null>(null)
	const draftCountdownInterval = useRef<NodeJS.Timeout | null>(null)
	const autoSaveInterval = useRef<NodeJS.Timeout | null>(null)
	
	const createDraft = useCallback(async () => {
		if (!pendingDraftState || isDraftCreated) return
		
		const initialData = {
			title: pendingDraftState.title,
			author: authorId,
			_status: 'draft',
			content: pendingDraftState.content,
			publishedAt: currentTime
		}
		
		setSaveStatus('Создание черновика...')
		
		try {
			const response = await fetch('/api/posts', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(initialData)
			})
			
			if (response.ok) {
				const data = await response.json()
				setDraftId(data.id)
				setLastSavedState(initialData)
				setIsDraftCreated(true)
				setPendingDraftState(null)
				setSaveStatus('Черновик создан')
			} else {
				setSaveStatus('Ошибка при создании черновика')
			}
		} catch {
			setSaveStatus('Ошибка при создании черновика')
		}
		
		clearTimeout(draftTimerRef.current!)
		clearInterval(draftCountdownInterval.current!)
	}, [pendingDraftState, isDraftCreated, authorId, currentTime])
	
	const scheduleDraftCreation = useCallback(() => {
		if (isDraftCreated) return
		
		clearTimeout(draftTimerRef.current!)
		clearInterval(draftCountdownInterval.current!)
		
		setDraftCountdown(5)
		draftCountdownInterval.current = setInterval(() => {
			setDraftCountdown(prev => {
				if (prev <= 1) {
					clearInterval(draftCountdownInterval.current!)
					return 5
				}
				return prev - 1
			})
		}, 1000)
		
		draftTimerRef.current = setTimeout(() => {
			createDraft()
		}, 5000)
	}, [createDraft, isDraftCreated])
	
	const handleChange = useCallback(
		(newContent: OutputData) => {
			setContent(newContent)
			if (!isDraftCreated) {
				const title = form.getValues().title || ''
				setPendingDraftState({ title, content: newContent })
				scheduleDraftCreation()
			}
		},
		[form, isDraftCreated, scheduleDraftCreation]
	)
	
	useEffect(() => {
		const contentRef = { current: content }
		
		const subscription = form.watch((value) => {
			if (value.title && !isDraftCreated) {
				setPendingDraftState({ title: value.title, content: contentRef.current })
				scheduleDraftCreation()
			}
		})
		
		return () => subscription.unsubscribe()
	}, [form, isDraftCreated, scheduleDraftCreation])
	
	useEffect(() => {
		if (!open || !draftId || !isDraftCreated) return
		
		autoSaveInterval.current = setInterval(() => {
			setAutoSaveCountdown(prev => {
				if (prev <= 1) {
					saveDraft()
					return 60
				}
				return prev - 1
			})
		}, 1000)
		
		return () => {
			clearTimeout(draftTimerRef.current!)
			clearInterval(draftCountdownInterval.current!)
			clearInterval(autoSaveInterval.current!)
			
			setContent({ blocks: [] })
			setSelectedCommunityId(null)
			setHeroImage(undefined)
			setSeoTitle('')
			setSeoDescription('')
			setSeoImage(undefined)
			setDraftId(null)
			setLastSavedState(null)
			setAutoSaveCountdown(60)
			setDraftCountdown(5)
			setSaveStatus('')
			setIsDraftCreated(false)
			setPendingDraftState(null)
		}
	}, [open, draftId, isDraftCreated])
	
	const getCurrentState = useCallback(() => ({
		title: form.getValues().title,
		heroImage: heroImage?.id,
		author: authorId,
		community: selectedCommunityId,
		content,
		meta: {
			title: seotitle,
			description: seodescription,
			image: seoImage?.id
		},
		_status: 'draft'
	}), [form, heroImage, authorId, selectedCommunityId, content, seotitle, seodescription, seoImage])
	
	const saveDraft = async () => {
		if (!draftId) return
		
		const currentState = getCurrentState()
		if (JSON.stringify(currentState) === JSON.stringify(lastSavedState)) {
			setSaveStatus('Изменений нет')
			setTimeout(() => setSaveStatus(''), 2000)
			return
		}
		
		setSaveStatus('Сохранение черновика...')
		try {
			const response = await fetch(`/api/posts/${draftId}`, {
				method: 'PATCH',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(currentState)
			})
			if (response.ok) {
				setLastSavedState(currentState)
				setSaveStatus('Черновик сохранён')
			} else {
				setSaveStatus('Ошибка при сохранении')
			}
		} catch {
			setSaveStatus('Ошибка при сохранении')
		}
		setTimeout(() => setSaveStatus(''), 2000)
	}
	
	const handleSubmit = async (e: FormEvent) => {
		e.preventDefault()
		const { title } = form.getValues()
		const postData = {
			title,
			heroImage: heroImage?.id,
			author: authorId,
			community: selectedCommunityId,
			content,
			meta: {
				title: seotitle,
				description: seodescription,
				image: seoImage?.id
			},
			publishedAt: post?.publishedAt || currentTime,
			_status: 'published'
		}
		
		setSaveStatus('Публикация...')
		try {
			const url = post || draftId ? `/api/posts/${post?.id || draftId}` : '/api/posts'
			const method = post || draftId ? 'PATCH' : 'POST'
			
			const response = await fetch(url, {
				method,
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(postData)
			})
			
			if (response.ok) {
				setSaveStatus(post ? 'Изменения сохранены' : 'Пост опубликован')
				onClose()
			} else {
				setSaveStatus('Ошибка при сохранении')
			}
		} catch {
			setSaveStatus('Ошибка при отправке запроса')
		}
	}
	
	return (
		<Dialog open={open} onOpenChange={onClose}>
			<DialogContent className="bg-secondary p-4 w-full max-w-[100vw] h-[100vh] flex flex-col m-0">
				<DialogHeader className="hidden">
					<DialogTitle />
				</DialogHeader>
				<SidebarProvider>
					<div className="flex h-full w-full">
						<MetaSidebar
							authorName={authorName}
							authorAvatar={authorAvatar}
							communities={communities}
							selectedCommunityId={selectedCommunityId}
							setSelectedCommunityId={setSelectedCommunityId}
							heroImage={heroImage}
							setHeroImage={setHeroImage}
							seotitle={seotitle}
							setSeoTitle={setSeoTitle}
							seodescription={seodescription}
							setSeoDescription={setSeoDescription}
							seoImage={seoImage}
							setSeoImage={setSeoImage}
							className="w-64 flex-shrink-0"
						/>
						<div className="flex-1 flex flex-col items-center p-4">
							<div className="w-full max-w-3xl flex flex-col h-full">
								<SidebarTrigger className="mb-4" />
								<div className="flex-1 overflow-y-auto space-y-1">
									<FormProvider {...form}>
										<form>
											<FormInput
												name="title"
												placeholder="Заголовок"
												className="bg-transparent text-lg border-none focus:ring-0 placeholder-gray-500"
												required
											/>
										</form>
									</FormProvider>
									<div className="flex-1">
										<Editor
											key="editor"
											data={content}
											onChange={handleChange}
											holder="editorjs"
											className="w-full h-full"
										/>
									</div>
								</div>
								<div className="my-4 flex justify-between items-center">
									<Button
										variant="blue"
										type="submit"
										onClick={handleSubmit}
										className="px-10"
									>
										{post ? 'Сохранить изменения' : 'Опубликовать'}
									</Button>
									<div className="text-sm text-gray-500">
										{saveStatus ||
											(!isDraftCreated && pendingDraftState
												? `Черновик создаётся через ${draftCountdown} сек`
												: draftId
													? `Автосохранение через ${autoSaveCountdown} сек`
													: '')}
									</div>
								</div>
							</div>
						</div>
					</div>
				</SidebarProvider>
			</DialogContent>
		</Dialog>
	)
}
