generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoleType {
  USER
  ADMIN
}

model StormicMedia {
  id          Int     @id @default(autoincrement())
  name        String?
  imageLogo   String?
  imageAuth   String?
  imageBanner String?
}

model SideCustomMenu {
  id      Int    @id @default(autoincrement())
  name    String
  pageUrl String
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String       @unique
  password String
  role     UserRoleType @default(USER)
  verified DateTime?

  provider   String?
  providerId String?

  verificationCode VerificationCode?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile_picture     String?
  bio                 String?
  roles               UserRoleAssignment[]
  posts               Post[]
  comments            Comment[]
  likes               Like[]
  views               View[]
  images              Image[]
  notifications       Notification[]
  categories          Category[]           @relation("UserCategories")
  moderatedCategories CategoryModerator[]
}

model VerificationCode {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  code String

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

model Post {
  post_id          Int        @id @default(autoincrement())
  title            String
  content          String
  author_id        Int
  publication_date DateTime   @default(now())
  last_edit_date   DateTime?
  status           String
  views_count      Int        @default(0)
  likes_count      Int        @default(0)
  category_id      Int
  tags             PostTags[]
  comments         Comment[]
  likes            Like[]
  views            View[]
  media            Media[]

  author   User     @relation(fields: [author_id], references: [id])
  category Category @relation(fields: [category_id], references: [category_id])
}

model Category {
  category_id   Int                 @id @default(autoincrement())
  category_name String
  posts         Post[]
  owner_id      Int
  moderators    CategoryModerator[]

  owner User @relation("UserCategories", fields: [owner_id], references: [id])
}

model CategoryModerator {
  category_id Int
  user_id     Int

  category Category @relation(fields: [category_id], references: [category_id])
  user     User     @relation(fields: [user_id], references: [id])

  @@id([category_id, user_id])
}

model Comment {
  comment_id        Int      @id @default(autoincrement())
  post_id           Int
  author_id         Int
  content           String
  publication_date  DateTime @default(now())
  parent_comment_id Int?

  post     Post      @relation(fields: [post_id], references: [post_id])
  author   User      @relation(fields: [author_id], references: [id])
  parent   Comment?  @relation(name: "CommentToComment", fields: [parent_comment_id], references: [comment_id])
  children Comment[] @relation(name: "CommentToComment")
}

model Tag {
  tag_id   Int        @id @default(autoincrement())
  tag_name String
  posts    PostTags[]
}

model PostTags {
  post_id Int
  tag_id  Int

  post Post @relation(fields: [post_id], references: [post_id])
  tag  Tag  @relation(fields: [tag_id], references: [tag_id])

  @@id([post_id, tag_id])
}

model UserRole {
  role_id     Int                  @id @default(autoincrement())
  role_name   String
  users       UserRoleAssignment[]
  permissions RolePermission[]
}

model UserRoleAssignment {
  user_id Int
  role_id Int

  user User     @relation(fields: [user_id], references: [id])
  role UserRole @relation(fields: [role_id], references: [role_id])

  @@id([user_id, role_id])
}

model Permission {
  permission_id   Int              @id @default(autoincrement())
  permission_name String
  roles           RolePermission[]
}

model RolePermission {
  role_id       Int
  permission_id Int

  role       UserRole   @relation(fields: [role_id], references: [role_id])
  permission Permission @relation(fields: [permission_id], references: [permission_id])

  @@id([role_id, permission_id])
}

model Like {
  like_id   Int      @id @default(autoincrement())
  user_id   Int
  post_id   Int
  like_date DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
  post Post @relation(fields: [post_id], references: [post_id])
}

model View {
  view_id   Int      @id @default(autoincrement())
  user_id   Int?
  post_id   Int
  view_date DateTime @default(now())

  user User? @relation(fields: [user_id], references: [id])
  post Post  @relation(fields: [post_id], references: [post_id])
}

model Image {
  image_id    Int      @id @default(autoincrement())
  url         String
  uploaded_by Int
  upload_date DateTime @default(now())

  user User @relation(fields: [uploaded_by], references: [id])
}

model Media {
  media_id    Int      @id @default(autoincrement())
  post_id     Int
  media_url   String
  media_type  String
  upload_date DateTime @default(now())

  post Post @relation(fields: [post_id], references: [post_id])
}

model Notification {
  notification_id   Int      @id @default(autoincrement())
  user_id           Int
  content           String
  notification_date DateTime @default(now())
  read_status       Boolean  @default(false)

  user User @relation(fields: [user_id], references: [id])
}
